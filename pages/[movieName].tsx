import { Element, Movie } from "@/typings";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import ReactPlayer from "react-player";
import {
  MdFullscreen,
  MdFullscreenExit,
  MdOutlineForward10,
  MdPause,
  MdPlayArrow,
  MdReplay10,
  MdSubtitles,
} from "react-icons/md";
import { ImVolumeHigh, ImVolumeMute2 } from "react-icons/im";
import { AiFillStepForward, AiOutlineQuestionCircle } from "react-icons/ai";
import { BsArrowLeft } from "react-icons/bs";
import { FullScreen, useFullScreenHandle } from "react-full-screen";
import { isMobile } from "react-device-detect";
import PlayerLandscape from "@/components/Player/Landscape";

export default function MoviePlaye() {
  const router = useRouter();
  let mediaRef: ReactPlayer | null = null;
  const fsHandle = useFullScreenHandle();
  const [data, setData] = useState<Movie | null>(null)
  const [movie, setMovie] = useState("");
  const [progess, setProgress] = useState("0%");
  const [duration, setDuration] = useState("");
  const [playing, setPlaying] = useState(true);
  const [volume, setVolume] = useState(1);
  const [controlDisp, setControlDisp] = useState(false);

  const { id, media, movieName } = router.query;
  const displayedName = (movieName as string)
    ?.split("-")
    .map((str) => str[0].toUpperCase() + str.slice(1))
    .join(" "); 

  useEffect(() => {
    if (!router) return;

    const fetchMovie = async () => {
      const data = await fetch(
        `https://api.themoviedb.org/3/${
          media === "tv" ? "tv" : "movie"
        }/${id}?api_key=${
          process.env.NEXT_PUBLIC_API_KEY
        }&language=en-US&append_to_response=videos`
      ).then((response) => response.json());

      setData(data)

      if (data?.videos) {
        const index = data.videos.results.findIndex(
          (element: Element) => element.type === "Trailer"
        );
        setMovie(data.videos?.results[index]?.key);
      }
    };

    fetchMovie();
  }, [router, id, media]);

  useEffect(() => {
    if (fsHandle.active) {
      let timeout: any;

      const handleMouseMove = () => {
        setControlDisp(true);
        clearTimeout(timeout);
        timeout = setTimeout(() => setControlDisp(false), 1500);
        return () => {
          clearTimeout(timeout);
        };
      };

      window.addEventListener("mousemove", handleMouseMove);

      return () => {
        window.removeEventListener("mousemove", handleMouseMove);
      };
    }
  }, [fsHandle.active]);

  const getDuration = (time: number) => {
    const hour = Math.floor(time / 3600);
    const min = Math.floor((time % 3600) / 60);
    const sec = Math.round((time % 3600) % 60);
    const dur = hour === 0 ? min + ":" + sec : hour + ":" + min + ":" + sec;
    setDuration(dur);
  };

  const forwardTen = () => {
    const currTime = mediaRef!.getCurrentTime();
    mediaRef?.seekTo(currTime + 10, "seconds");
  };

  const backwardTen = () => {
    const currTime = mediaRef!.getCurrentTime();
    mediaRef?.seekTo(currTime - 10, "seconds");
  };

  const getProgress = (progress: any) => {
    setProgress(`${progress.played * 100}%`);
  };

  return (
    <FullScreen handle={fsHandle}>
      <Head>
        <title>{displayedName} - Netflix</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="relative w-screen h-screen">
        {isMobile && <PlayerLandscape movie={movie} displayedName={displayedName} fsIn={() => fsHandle.enter}/>}
        {!isMobile && (
          <>
            <ReactPlayer
              url={`https://www.youtube.com/watch?v=${movie}`}
              ref={(p) => (mediaRef = p)}
              width="100%"
              height="100%"
              style={{
                position: "absolute",
                top: "0",
                left: "0",
                zIndex: "-10",
              }}
              playing={playing}
              volume={volume}
              onDuration={(time) => getDuration(time)}
              onProgress={(progress) => getProgress(progress)}
            />

            <div className={`${playing ? "opacity-0" : "delay-[3000ms] duration-500"} transition-all w-full h-full flex flex-col justify-center left-0 pl-24 bg-black/60`}>
              <p className="text-[#d6d6d6]">You{"'"}re watching</p>
              <h1 className="text-5xl font-medium mb-6 mt-1 max-w-[45%]">{data?.name || data?.title}</h1>
              <p className="max-w-[50%] text-[#d6d6d6]">{data?.overview}</p>
            </div>

            <BsArrowLeft
              className={`absolute top-10 left-10 h-10 w-10 cursor-pointer trasnition-all ${
                !controlDisp && fsHandle.active && "opacity-0"
              }`}
              onClick={() => router.push("/")}
            />

            <div
              className={`absolute z-20 bottom-0 left-0 px-6 w-screen transition-all ${
                !controlDisp && fsHandle.active && "translate-y-full"
              }`}
            >
              <div className="flex gap-7 items-center">
                <div className="w-full h-1 bg-gray-300/40">
                  <div
                    className={`h-full bg-[#e50914] ${progess}`}
                    style={{ width: `${progess}` }}
                  />
                </div>
                <p className="text-sm font-thin">{duration}</p>
              </div>

              <div className=" py-6 flex gap-3 items-center justify-between text-white">
                <div className="flex items-center gap-7">
                  <div
                    onClick={() => setPlaying(!playing)}
                    className="cursor-pointer"
                  >
                    {playing && <MdPause className="h-7 w-7 text-white" />}
                    {!playing && <MdPlayArrow className="h-7 w-7" />}
                  </div>

                  <MdReplay10
                    className="h-7 w-7 cursor-pointer"
                    onClick={backwardTen}
                  />
                  <MdOutlineForward10
                    className="h-7 w-7 cursor-pointer"
                    onClick={forwardTen}
                  />
                  {volume === 1 && (
                    <ImVolumeHigh
                      className="h-5 w-5 cursor-pointer"
                      onClick={() => setVolume(0)}
                    />
                  )}
                  {volume === 0 && (
                    <ImVolumeMute2
                      className="h-5 w-5 cursor-pointer"
                      onClick={() => setVolume(1)}
                    />
                  )}
                  <p className="overflow-hidden text-ellipsis max-w-[calc(100vw-502px)]">
                    {displayedName}
                  </p>
                </div>
                <div className="flex items-center gap-7">
                  <AiOutlineQuestionCircle className="h-7 w-7 cursor-pointer" />
                  <AiFillStepForward className="h-7 w-7 cursor-pointer" />
                  <MdSubtitles className="h-7 w-7 cursor-pointer" />
                  <div>
                    {!fsHandle.active && (
                      <MdFullscreen
                        className="h-7 w-10 cursor-pointer"
                        onClick={fsHandle.enter}
                      />
                    )}
                    {fsHandle.active && (
                      <MdFullscreenExit
                        className="h-7 w-10 cursor-pointer"
                        onClick={fsHandle.exit}
                      />
                    )}
                  </div>
                </div>
              </div>
            </div>
          </>
        )}
      </main>
    </FullScreen>
  );
}
